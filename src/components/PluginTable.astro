---
import fs from "fs";
import path from "path";

// Load data at build time
const dataPath = path.resolve(
  import.meta.env.SRC_DIR || "./src",
  "data/logseq-marketplace-plugins.json"
);
const plugins = JSON.parse(fs.readFileSync(dataPath, "utf-8"));

const columns = [
  {key: "name", label: "Name"},
  {key: "description", label: "Description"},
  {key: "author", label: "Author"},
  {key: "repo", label: "Repo"},
  {key: "version", label: "Version"},
  {key: "created_at", label: "Created"},
  {key: "last_updated", label: "Updated"},
];

let sortKey = "name";
let sortAsc = true;

function sortData(data, key, asc) {
  return [...data].sort((a, b) => {
    if (a[key] < b[key]) return asc ? -1 : 1;
    if (a[key] > b[key]) return asc ? 1 : -1;
    return 0;
  });
}

const sortedPlugins = sortData(plugins, sortKey, sortAsc);
---

<style>
  .plugin-table-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
    background-color: #002c38;
    box-sizing: border-box;
    border: 2px solid #6ecac9;
    outline: 1px solid #002c38;
    font-family: Arial, sans-serif; /* Add this line */
    font-size: 14px; /* Add this line to set the base font size */
  }

  h1 {
    position: sticky;
    top: 0;
    z-index: 20;
    background: #002c38; /* Darker Logseq logo color */
    margin: 0;
    padding: 1rem 0;
    border-bottom: 2px solid #6ecac9; /* Light border for contrast */
    text-align: center;
    color: #fff; /* White text for better readability */
  }

  .table-container {
    flex: 1;
    overflow-y: auto;
    margin: 1rem 12px;
    background-color: #fff; /* White background for the table */
    border-radius: 8px; /* Optional: rounded corners for the table container */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Optional: subtle shadow for depth */
  }

  table {
    border-collapse: separate;
    border-spacing: 0;
    width: 100%;
  }

  thead {
    position: sticky;
    top: 0;
    z-index: 10;
  }

  th {
    cursor: pointer;
    background: #fff;
    padding: 0.5rem;
    border-top: 1.15px solid #000;
    border-bottom: 1.15px solid #000;
    position: sticky;
    top: 0;
  }

  td {
    padding: 0.5rem;
    border-bottom: 1px solid #eee;
  }

  .date-column {
    width: 12ch;
  }

  tbody tr:nth-child(even) {
    background-color: #f0f0f0; /* Light gray for even rows */
  }

  tbody tr:nth-child(odd) {
    background-color: #ffffff; /* White for odd rows */
  }

  tbody tr:hover {
    background-color: #6ecac9 !important; /* Logseq logo color for hover effect */
    color: #fff !important; /* White text for better contrast on hover */
    text-shadow: 0 0 2px rgba(0, 0, 0, 0.7) !important; /* Add a subtle text shadow */
  }

  /* Add a subtle transition for a smoother hover effect */
  tbody tr {
    transition: all 0.2s ease;
  }
</style>

<div class='plugin-table-container'>
  <h1>Logseq Marketplace Plugins</h1>
  <div class='table-container'>
    <table id='plugin-table' border='1'>
      <thead style={`--sticky-offset:${Astro.props?.stickyOffset || "0"};`}>
        <tr>
          {
            columns.map((col) => (
              <th
                class={
                  col.key === "created_at" || col.key === "last_updated"
                    ? "date-column"
                    : ""
                }
                onclick={`sortTable('${col.key}')`}>
                {col.label}
              </th>
            ))
          }
        </tr>
      </thead>
      <tbody>
        {
          sortedPlugins.map((plugin) => (
            <tr>
              {columns.map((col) => {
                let value = plugin[col.key] || "";
                if (
                  (col.key === "created_at" || col.key === "last_updated") &&
                  value
                ) {
                  value = value.slice(0, 10); // YYYY-MM-DD
                }
                // Render repo as a clickable markdown-like link
                if (col.key === "repo" && value) {
                  const url = `https://github.com/${value}`;
                  return (
                    <td>
                      <a href={url} target='_blank' rel='noopener noreferrer'>
                        {value}
                      </a>
                    </td>
                  );
                }
                return (
                  <td
                    class={
                      col.key === "created_at" || col.key === "last_updated"
                        ? "date-column"
                        : ""
                    }>
                    {value}
                  </td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</div>

<script>
  const columns = [
    {key: "name", label: "Name"},
    {key: "description", label: "Description"},
    {key: "author", label: "Author"},
    {key: "repo", label: "Repo"},
    {key: "version", label: "Version"},
    {key: "created_at", label: "Created"},
    {key: "last_updated", label: "Updated"},
  ];
  let sortKey = "name";
  let sortAsc = true;

  window.sortTable = function sortTable(key) {
    if (sortKey === key) {
      sortAsc = !sortAsc;
    } else {
      sortKey = key;
      sortAsc = true;
    }
    const rows = Array.from(
      document.querySelectorAll("#plugin-table tbody tr")
    );
    rows.sort((a, b) => {
      const aText = a
        .querySelector(
          `td:nth-child(${columns.findIndex((c) => c.key === key) + 1})`
        )
        .textContent.trim()
        .toLowerCase();
      const bText = b
        .querySelector(
          `td:nth-child(${columns.findIndex((c) => c.key === key) + 1})`
        )
        .textContent.trim()
        .toLowerCase();
      if (aText < bText) return sortAsc ? -1 : 1;
      if (aText > bText) return sortAsc ? 1 : -1;
      return 0;
    });
    const tbody = document.querySelector("#plugin-table tbody");
    rows.forEach((row) => tbody.appendChild(row));
  };
</script>
